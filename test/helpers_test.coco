import unittest
from lib.helpers import *

class TestStringMethods(unittest.TestCase):
    def test_middle(self):
        range(6,8) |> middle |> self.assertEqual$(6)

    def test_special_h(self):
        (1,1,5) |*> special_h |> self.assertEqual$(1)
        (1,3,5) |*> special_h |> self.assertEqual$(0)
        (1,4,5) |*> special_h |> self.assertEqual$(-1)

    def test_h(self):
        ((index=0, value=-1/2), (index=2, value=1/2), 0) |*> h |> self.assertEqual$(0)
        ((index=0, value=-1/2), (index=0, value=9/2), 0) |*> h |> self.assertEqual$(0.8)
        ((index=1, value=-5/2), (index=2, value=1/2), 0) |*> h |> self.assertEqual$(-2/3)
        ((index=0, value=0), (index=2, value=0), 4) |*> h |> self.assertEqual$(1)
        ((index=0, value=0), (index=3, value=0), 4) |*> h |> self.assertEqual$(0)
        ((index=1, value=0), (index=3, value=0), 4) |*> h |> self.assertEqual$(-1)


    def test_weighted_m(self):
        ((value = 2/7, weight = 1), (value = 2/5, weight = 2), (value = -1/2 , weight = 3)) |> weighted_med |> self.assertEqual$((-0.5+2/7)/2)
        ((value = 1/3, weight = 1), (value = 0, weight = 1), (value = 0 , weight = 2), (value = -1 , weight = 3)) |> weighted_med |> self.assertEqual$(0)
        ((value = 1, weight = 3), (value = 1, weight = 3), (value = 0 , weight = 3), (value = -1 , weight = 3)) |> weighted_med |> self.assertEqual$(0.5)


    def test_median_overflow(self):
        (2, [3,2,1]) |*> median_overflow |> self.assertEqual$(2)
        (0.5, [3,2,1]) |*> median_overflow |> self.assertEqual$(3)


    def test_take(self):
        ([1,1,1/3], range(0,3)) |*> take |> self.assertEqual$((value = 1, weight = 3))
        ([1,0,-1], range(1,3)) |*> take |> self.assertEqual$((value = 0, weight = 2))

    
    def test_matrix_median(self):
        ([1,1,1/3;;1,1,0;;1,0,-1;;0,-1,-1], [range(0,3), range(0,3), range(0,3), range(0,3)]) |*> map$(take) |> list |> weighted_med |> self.assertEqual$(0.5)


if __name__ == '__main__':
    unittest.main()