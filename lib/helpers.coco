import statistics
import math
import itertools
import bisect

def middle(r) = ((min(r) + max(r))/2 |> math.floor) if len(r) > 0 else None

case def add:
    case(d, (k,v) if k in d) = d | {k: [*d[k], v]}
    case(d, (k,v)) = d | {k:[v]}

def group_by(f, l):
    return l |> reduce$((d, item) => add(d, (f(item), item)), ?, {})


case def eqi:
    case(x,y if x < y) = -1
    case(x,y if x == y) = 0
    case(x,y if x > y) = 1


def special_h(i, j, k) =  k `eqi` i + j + 1 


case def h:
    case((i,xval),(j, yval),k if xval == yval == 0) = special_h(i, j, k)
    case((_,xval),(_, yval), _) = (yval + xval)/(yval-xval)


def weighted_med(combined):
    print("start weighted_med")
    # Sort the combined list by values
    combined = combined |> filter$(x=> x.value != None) |> list
    combined.sort(key=lambda x: x.value)
    
    # Separate the sorted values and weights
    sorted_values = [x.value for x in combined if x.value != None]
    sorted_weights = [x.weight for x in combined if x.value != None]
    
    # Compute the cumulative sum of the weights
    cumulative_weights = [sum(sorted_weights[:i+1]) for i in range(len(sorted_weights))]
    
    # Find the position where the cumulative sum exceeds half of the total weight
    total_weight = sum(sorted_weights)
    median_index = next(i for i, total in enumerate(cumulative_weights) if total >= total_weight / 2)
    
    # The weighted median is the value at this position
    return sorted_values[median_index]

# def weighted_med(tuples):
#     x = tuples |> map$(tup => [tup.value] * tup.weight) |> flatten
#     return x |> statistics.median


# def median_overflow(wmed, row, range = range(0,0)):
#     return row |> enumerate |> filter$(tup => tup[1] <= wmed) |> x => next(x, [len(row)]) |> x => x[0]

# def median_overflow2(wmed, row, range = range(0,0)):
#     left = row |> enumerate |> filter$(tup => tup[1] < wmed) |> x => next(x, [len(row)]) |> x => x[0]
#     right = row |> enumerate |> reversed |> filter$(tup => tup[1] > wmed) |> x => next(x, [-1]) |> x => x[0]
#     return (left,right+1)


def median_overflow2(wmed, row, r=range(0,0)):
    print("start median_overflow2")
    left = bisect.bisect_right(row,-wmed,key=x=>-x, lo=(if len(r) then min(r) else 0), hi=(if len(r) then max(r)+1 else None))
    right = bisect.bisect_left(row,-wmed,key=x=>-x, lo=(if len(r) then min(r) else 0), hi=(if len(r) then max(r)+1 else None))

    return (left, right)

def take(arr, range):
    match middle(range):
        case None:
            return (value = None, weight = 0)
        case mid:
            return (value = arr[mid], weight = len(range))


case def row_overflow:
    case(rows, ranges, med) = row_overflow(rows, ranges, med, [])
    case([row] + rows, [range] + ranges, med, med_over) = row_overflow(rows, ranges, med, med_over + [median_overflow2(med, row, range)])
    case(_,_,_,med_over) = med_over


# [1,2,3]
# (3,3)
def sum_if_dims(indexes, matrix_dim) = sum(indexes) > (matrix_dim[0] * matrix_dim[1])/2

#(0,3|0,3|0,3|0,3), False, [2,2,1,0] -> (2,3|2,3|1,3|0,3)
def alter_ranges(ranges, b, indexes):
    print("start alter ranges")
    return (ranges,indexes) |*> map$((r,i) => if len(r) then (if b then range(min(r),i) else range(i,max(r)+1)) else r) |> list
    


def dims(matrix) = (len(matrix), len(matrix[0]))


def rmfilter(matrix,ranges):
    fr = ranges |> map$(x => len(x))
    return list(itertools.compress(matrix, fr)), list(itertools.compress(ranges, fr))
    # (matrix |*> |> filter$(.!=None), ranges |> filter$(len))


def indexes_to_alter(matrix, ranges) = (matrix, ranges) |*> map$(take) |> weighted_med |> row_overflow$(matrix, ranges)


case def alteration:
    case (k,_, rightsum, _, ranges, indexes if k <= rightsum) = alter_ranges(ranges,True, indexes |> map$(x => x[1]))
    case (k,leftsum, _, _, ranges, indexes if k > leftsum) = alter_ranges(ranges,False, indexes |> map$(x => x[0]))
    case (_,_,_, matrix, ranges, _) = (matrix, ranges) |*> map$(take) |> weighted_med |> (True, .)

def xxx(k, matrix, ranges):
    print("start xxx")
    indexes = indexes_to_alter(matrix,ranges)
    leftsum, rightsum = indexes |> reduce$((x,y)=>(x[0]+y[0], x[1]+y[1]))
    # print(f"ranges before alteration {k} {indexes} {ranges} {leftsum} {rightsum}")
    res = alteration(k, leftsum, rightsum, matrix, ranges, indexes)
    # print(f"ranges after alteration {res}")
    return res

    # match k,leftsum,rightsum:
    #     case (k,_, rightsum if k <= rightsum):
    #         return alter_ranges(ranges,True, indexes |> map$(x => x[1]))
    #     case (k,leftsum, _ if k > leftsum):
    #         return alter_ranges(ranges,False, indexes |> map$(x => x[0]))
    #     case (_,_,_):
    #         return (matrix, ranges) |*> map$(take) |> weighted_med



def each_one(arr) = arr |> map$(x => len(x) == 1) |> all

case def until_death:
    case(_,_,(True,x)) = x
    case(k,matrix, ranges) = (matrix,ranges) |*> xxx$(k) |> until_death$(k,matrix)


def sum_if_dims2(ranges, matrix_dim):
    x = ranges |> map$(min) |> sum
    should_before = matrix_dim |*> (*) |> (.%2) == 0
    res =  matrix_dim |*> (*) |> (./2) |> math.ceil |> (.-x)
    return (should_before, res)



def medcouple(matrix, ranges):
    print("medcouple")
    match sum_if_dims2(ranges, dims(matrix)):
        case (False, res):
            return until_death(res, matrix, ranges)
        case (True, res):
            return (until_death(res, matrix, ranges) + until_death(res+1, matrix, ranges))/2
    #res = (m,rs) |*> map$((row, r) => row[min(r)]) |> sorted..>reversed..>list
    # print(f"res after until death: {res}")
    # print(f"sum after until death: {sum_if_dims2(rs,dims(m))}")
    #return res[sum_if_dims2(rs,dims(m))] |> statistics.mean


def prepare(data):
    print("start prepare")
    mean = data |> statistics.median
    (zm,zp) = data |> map$(x => x-mean) |> group_by$( x => x `eqi` 0) |> x => (x[0] + x[-1], x[1]+ x[0]) if 0 in x else (x[-1],x[1])
    return  ([[h(m,p,len(zp)) for m in enumerate(zm)] for p in enumerate(zp)],itertools.repeat(range(0,len(zm)), len(zp)) |> list) |*> medcouple
